# Direct Build Dockerfile - Simple and Fast
# Builds frontend directly without turbo workspace complexity

FROM node:24-alpine AS base

# Install dependencies
RUN apk add --no-cache libc6-compat openssl

WORKDIR /app

# === DEPENDENCIES ===
FROM base AS dependencies

# Copy frontend package files and configs
COPY apps/frontend/package*.json ./
COPY apps/frontend/next.config.js ./
COPY apps/frontend/tailwind.config.js ./
COPY apps/frontend/postcss.config.js ./
COPY apps/frontend/tsconfig.json ./
# Copy root tsconfig for Next.js build
COPY tsconfig.json ./tsconfig.json

# Install frontend dependencies directly
RUN npm install

# === BUILD ===
FROM dependencies AS builder

# Copy frontend source code
COPY apps/frontend/src ./src
COPY apps/frontend/public ./public
COPY apps/frontend/middleware.ts ./

# Build the frontend
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1

RUN npm run build

# === PRODUCTION ===
FROM node:24-alpine AS production

# Security setup
RUN apk update && apk upgrade && \
    apk add --no-cache openssl && \
    rm -rf /var/cache/apk/*

RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

WORKDIR /app

ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    PORT=3000

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

USER nextjs

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000', (res) => { \
    process.exit(res.statusCode === 200 ? 0 : 1) \
  }).on('error', () => process.exit(1))"

CMD ["node", "server.js"]